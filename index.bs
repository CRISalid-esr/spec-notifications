<pre class='metadata'>
Title: Event Notifications in Value-Adding Networks
Shortname: notifications
Level: 1
Status: LD
URL: https://www.eventnotifications.net
Editor: Patrick Hochstenbach, [Ghent University Library](https://lib.ugent.be), patrick.hochstenbach@ugent.be
Editor: Miel Vander Sande, [meemoo - Flemish Institute for Archives](https://meemoo.be), miel.vandersande@meemoo.be
Editor: Ruben Dedecker, [IDLab - Ghent University](https://knows.idlab.ugent.be), ruben.dedecker@ugent.be
Editor: Paul Walk, [Antleaf](https://antleaf.com), paul@paulwalk.net
Editor: Martin Klein, [Los Alamos National Laboratory](https://www.lanl.gov/library/), mklein@lanl.gov
Editor: Herbert Van de Sompel, [IDLab - Ghent University](https://knows.idlab.ugent.be), herbert.vandesompel@ugent.be
Abstract: This document lists the possible notifications that can be used in the network. 
Markup Shorthands: markdown yes 
Boilerplate: conformance no, index no
</pre>

<style>
table {
  margin: 25px auto;
  border-collapse: collapse;
  border: 1px solid #eee;
  border-bottom: 2px solid #005A9C;
}
table tr:hover {
  background: #f4f4f4;
}
table tr:hover td {
  color: #555;
}
table th, table td {
  color: #999;
  border: 1px solid #eee;
  padding: 12px 12px;
  border-collapse: collapse;
}
table th {
  background: #005A9C;
  color: #fff;
}
table tbody > tr > th {
  background: #fff;
  color: #005A9C;
}
table th.last {
  border-right: none;
}
</style>

Feedback welcome: <a href="mailto:value-adding-networks@googlegroups.com">value-adding-networks@googlegroups.com</a>.

Introduction {#Introduction}
=====================

<img alt="Overview of the network participants" 
     width="800"
     src="images/network.svg">

*Figure 1: Overview of the network participants*

This specification details a profile for using Linked Data Notifications [[LDN]] with 
ActivityStreams2 [[AS2]] payloads in value-adding networks. 

A value-added network, as considered by this specification, is a network in which Web 
resources, for the purpose of this specification named [Artifacts](#Artifact), are made available by
nodes in the network, value is added to these artifacts by other nodes in the network, 
and LDN/AS2 notifications with that regard are exchanged among network nodes. 

The type of web resources that are considered artifacts in a value-adding network depends 
on its community of use. For example, in a research communication value-adding network, 
artifacts would include research outputs such as preprints, reviewed articles, datasets, 
workflows, and software that are part of the scholarly record. 

A value-adding service applied to an artifact does not change its content. Rather, the 
outcome of applying the service, for the purpose of this specification named 
[Service Result](#ServiceResult), can be associated with the artifact. It could, for example, 
be information that an artifact was made discoverable by a portal; a trusted timestamp for an artifact;  
information about a linkage the artifact is involved in; the creation of a new resource 
related to the artifact (e.g. an enhanced version, a translation, an archival copy). 

Regarding the exchange of these LDN/AS2 notifications, the specification distinguishes 
between two logical roles [Data Node](#DataNode) and [Service Node](#ServiceNode):

- A Data Node is a network node that makes artifacts available to the network.
- A Service Node is a network node that provides value-adding services for artifacts that are available to the network.

In order to be able to communicate, each *Data Node* and *Service Node*
has [LDN Sender](https://www.w3.org/TR/ldn/#sender) and [LDN Receiver](https://www.w3.org/TR/ldn/#receiver) 
(LDN Inbox) capabilities that are used:

- by a Data Node to send and receive LDN notifications pertaining to artifacts that it makes available to the network, and, 
- by a Service Node to send and receive LDN notifications pertaining to value-adding services for artifacts that are made available to the network.

[Agents](#Agent) operate on behalf of Data Node and Service Node; they can be 
humans or machines, individuals or organizations. These agents exchange LDN notifications, each of which pertains
to an artifact that is hosted by a Data Node. 

The intended communication style among Nodes is point-to-point, requiring no centralized hubs. It is 
push-oriented, with only the relevant Nodes being updated about new information as it becomes available. 
Interactions among Nodes are necessarily asynchronous because certain notification patterns do not require a 
response and, in patterns that do, such as requesting a service for an artifact, the time between a request 
and the announcement of the service result is unpredictable and could range between almost immediate to months. 

The communication patterns are action-oriented. The patterns express when an activity was initiated, 
acknowledged, or yielded a result. Message payloads contain only core information (in most cases [[URL]] 
identifiers) to convey in which value-adding activities Data Nodes, Service Nodes, and artifacts are 
involved and what the service results are. The assumption is that further information about the entities 
involved is available by using their identifiers in auto-discovery mechanisms. As such, message payloads 
are typically expressed by reference (i.e. by means of the [[URL]] of an entity) rather than by value (i.e. 
by means of a description of an entity).

A common scenario covered by the specification is depicted in Figure 1, which shows, on the dashed lines, 
prefixed by `AS`, the AS2 element used in the LDN/AS2 payloads to convey the respective entity involved 
in the value-adding network:

- An agent at the end of a Data Node uses an LDN Sender to send a notification to a Service Node's LDN Inbox (green arrow) requesting a value-adding service for an artifact made available by the Data Node. The URL of the artifact is provided in the AS2 object element of the notification.
- An agent at the end of the Service Node uses an LDN Consumer to obtain this request from the Service Node's LDN Inbox. Provided that the Service Node is willing and able to perform the requested service, it goes ahead and does so. The manner in which this is done is outside the scope of this specification. 
- Once the value-adding service is executed, an agent at the end of the Service Node that is aware of the service result sends a notification (blue arrow) to the Data Node's LDN Inbox. The service result is provided in the AS2 object element of the notification. Moreover, the artifact that the service result pertains to is provided in the AS2 context element of the notification.
- An agent at the end of the Data Node consumes this response by obtaining it from the Data Node's LDN Inbox, and acts upon the service result in a way deemed appropriate.

From the perspective of LDN:

- An artifact made available to the network by a Data Node is an LDN Target and therefore has a [discoverable](https://www.w3.org/TR/ldn/#discovery) LDN Inbox. The LDN Inbox is used to receive LDN/AS2 notifications that provide the Data Node, acting as an LDN Consumer, with value-adding information pertaining to an artifact.
- A Service Node that provides value-adding services to artifacts made available to the network is an LDN Target and therefore has a [discoverable](https://www.w3.org/TR/ldn/#discovery) LDN Inbox. That LDN Inbox is used to receive LDN/AS2 notifications that provide the Service Node, acting as an LDN Consumer, either with information pertaining to an artifact or with a request for the provision of a value-adding service for an artifact.

Conformance 
===========

Conformance requirements are expressed with a combination of descriptive assertions and RFC 2119 terminology. 
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, 
and “OPTIONAL” in the normative parts of this document are to be interpreted as described in RFC 2119. However, 
for readability, these words do not appear in all uppercase letters in this specification.

All of the text of this specification is normative except sections explicitly marked as non-normative, examples, 
and notes. [[RFC2119]]

Document Conventions
=====================

Within this document, the following namespace prefix bindings to [[URI]]-s are used: 

<table>
  <thead>
    <tr>
      <th>Prefix
      <th>Namespace
  <tbody>
    <tr>
      <td>rdf
      <td>http://www.w3.org/1999/02/22-rdf-syntax-ns#
    <tr>
      <td>as
      <td>https://www.w3.org/ns/activitystreams#
    <tr>
      <td>ldp
      <td>http://www.w3.org/ns/ldp#
    <tr>
      <td>schema
      <td>http://schema.org/
</table>

When in the textual parts of this document a namespace prefix is used, it should be 
interpreted with the bindings as stated above. In our examples LDN/AS2 payloads we use JSON-LD as 
syntax. In our JSON-LD examples we don't explicity write the prefixes. The `@context` 
element in JSON-LD defines a mapping from terms to [[URI]]-s. We refer to the [[JSON-LD]] specification 
for more information about this more concise way of notation.

Network entities {#NetworkEntities}
================

This section clarifies the terminology that was intuitively introduced in the introduction.

## Agent ## {#Agent}

An *Agent* is an active participant in the network: an Agent performs actions, can be identified 
or addressed with a [[URI]], and can send or receive LDN/AS2 notifications. An *Agent* can be 
human or machine, individual or organization, and operate on behalf of a *Data Node* or a 
*Service Node*. 

## Artifact ## {#Artifact}

An *Artifact* is a Web resource identified by a [URL] that is made available to the network by 
a *Data Node*, and that serves as the main focus of interaction between *Agents*. An *Artifact* can 
be atomic or arbitrary complex. The manner in which *Artifacts* are organized is outside the 
scope of this specification and depends on the implementing community.

## Data Node ## {#DataNode}

A *Data Node* is a network node that makes *Artifacts* available to the network and provides 
one or more LDN Inboxes via which *Agents* that operate on behalf of the *Data Node* can be 
reached. These LDN Inboxes are set up to receive LDN/AS2 notifications pertaining to the 
*Artifacts* that are made available to the network by the *Data Node*.  

## Service Node ## {#ServiceNode}

A *Service Node* is a network node that provides value-added services for *Artifacts* hosted 
by *Data Nodes* and provides one or more LDN Inboxes via which *Agents* that operate on behalf 
of the *Service Node* can be reached. These LDN Inboxes are set up to receive LDN/AS2 
notifications pertaining to *Artifacts* that are made available to the network by *Data Nodes*. 

## Service Result ## {#ServiceResult}

A *Service Result* is the outcome of the provision of a value-added service by a *Service Node* 
for an *Artifact* that is made available to the network by a *Data Node*. A *Service Result* 
can be a Web resource identified by a [[URL]] or information that is provided inline in an 
LDN/AS2 notification.

A *Service Result* that is a Web resource identified by a [[URL]] can itself become an *Artifact* 
when it is made available to the network by a *Data Node* that, for example, is associated with 
the *Service Node* that generated the service result. This makes a *Service Result* available as 
a new *Artifact* for which new value-added services can be provided.

Properties in LDN/AS2 Notifications {#Activities}
===================================

In a value-adding network, LDN notifications are sent from one *Agent* to another *Agent*. Notification 
payloads are expressed using the ActivityStreams 2.0 vocabulary and SHOULD use [[JSON-LD]] as default 
syntax, but other RDF syntaxes MAY be used. Each notification describes an [[AS2#activities|AS2 Activity]] that involves 
either an *Artifact*, a *Service Result* pertaining to an *Artifact*, or a previous [[AS2#activities|AS2 Activity]].

This section describes the properties that are used in the notifications to describe an activity and 
provides details on their content: the core JSON-LD id and type properties and the AS2 object, origin, 
target, actor, context, inReplyTo properties.

## JSON-LD id ## {#ActivityId}

An LDN/AS2 notification MUST specify an identifier for the activity, expressed in JSON-LD as 
`@id` or shortened as `id`,  and its value MUST be a valid [[URI]]. In case this [[URI]] is a [[URL]], 
it MUST be dereferencable and return a representation of the notification itself. When referring to an 
activity, its activity identifier MUST be used. Nodes in the network MUST NOT edit or remove the activity 
identifier when processing LDN/AS2 notifications. 

Note that the activity identifier is distinct from the notification identifier, which is the [[URL]] 
minted by the LDN Receiver when the LDN/AS2 notification that describes the activity is received in 
its LDN Inbox. An LDN Receiver may choose to reflect components of the activity identifier in the 
notification identifier it mints but, in case this happens, network nodes can not infer a relationship 
between the activity identifier and the notification identifier on this basis. 

To establish robust communication on the network, activities have to be at least uniquely identifiable 
within the scope of the network. Therefore, an identifier of any kind used MUST be a valid [[URI]].

<div class=example>
Alice notifies Bob about the creation of a new Artifact. In the LDN/AS2 payload:

- The activity identifier is `https://acme.org/events/alice/0F402B08-F676-40EE-9D4B-480B3F985B65`. Since 
the activity identifier is a [[URL]], it can be dereferenced to yield the LDN/AS2 notification that Alice 
sent to Bob. 
- Alice is the *Agent* acting on behalf of a *Data Node* that has made her *Artifact* 
`https://acme.org/artifacts/alice/five_steps_to_success.html` available.
- Bob is the *Agent* acting on behalf of a *Service Node* that makes his LDN Inbox 
`https://infinity.science.com/inbox/bob` discoverable. 

<pre class=include-code>
path: examples/example1.jsonld
highlight: json
show: 
</pre>

</div>

## JSON-LD type ## {#ActivityType}

An LDN/AS2 notification MUST specify an activity type, expressed in JSON-LD as `@type` or shortened 
as `type`,  and its value MUST be the type of AS2 Activity that it describes. Only the subset of 
[[AS2#activities|AS2 Activity]] Types shown here are supported:


- AS2 Activities that express the state of an *Artifact*: `as:Create`, `as:Update`, `as:Remove`, `as:Announce`:
    - `as:Create`: An *Agent* created an *Artifact* that is made available by a *Data Node*.
    - `as:Update`: An *Agent* updated an *Artifact* that is made available by a *Data Node*.
    - `as:Remove`: An *Agent* deleted an *Artifact* that is made available by a *Data Node*.
    - `as:Announce`: An *Agent* announces the existence of an *Artifact* that is made available by a *Data Node*. 
    Unlike `as:Create`, which conveys when an *Artifact* was created, `as:Announce` merely conveys its existence.
- AS2 Activities that pertain to applying value-adding services to an *Artifact*: `as:Offer`, `as:Accept`, 
`as:Reject`, `as:Announce`, and `as:Undo`:
    - `as:Offer`: An *Agent* offers an *Artifact* to another *Agent* in order to request the provision of a service. 
    - `as:Accept`: An *Agent* accepts to provide a service that was requested for a specific *Artifact* by another *Agent*. This is a reply to a previously received `as:Offer`.
    - `as:Reject`: An *Agent* declines to provide a service that was requested for a specific *Artifact* by another *Agent*. This is a reply to a previously received `as:Offer`.
    - `as:Announce`: An *Agent* announces a *Service Result* pertaining to an *Artifact* that is either the result of executing a previously requested service or is volunteered.
    - `as:Undo`: An *Agent* retracts a prior activity of type `as:Offer`, `as:Accept`, `as:Reject`, or `as:Announce`.

In addition to these AS2 Activity Types, types ([[URI]]s) originating from vocabularies chosen by an 
application domain MAY be specified. 

<div class=example>
Bob announces that he endorses the publication of Alice by sharing a review. In the LDN/AS2 notification 
payload:

- Two activity types are indicated: `as:Announce` as a means to announce the availability of Bob’s review 
and `schema:EndorseAction` as a means to convey that Alice’s publication is endorsed by Bob.
- Bob is the *Agent* acting on behalf of *Service Node* `Infiniti science publishing`.
- Bob’s review is a *Service Result* made available as a Web resource with URI 
`https://infinity.science.com/artifacts/bob/review_123.html`.
- Alice is the *Agent* acting on behalf of a *Data Node* that has made her Artifact 
`https://acme.org/artifacts/alice/five_steps_to_success.html` available and that makes her LDN Inbox 
`https://acme.org/inbox/alice` discoverable. 

<pre class=include-code>
path: examples/example2.jsonld
highlight: json
show: 
</pre>
</div>

## AS2 object ## {#ActivityObject}

An LDN/AS2 notification MUST specify an AS2 object, expressed by means of the `as:object` property. 
Depending on the activity type, the AS2 object can refer to:

- An *Artifact* made available by a *Data Node*; 
- A *Service Result* generated by a *Service Node*; 
- A previous activity.

For `as:object`, one of the core [[AS2#object-types|Object Types]] MUST be expressed. In addition to 
these [[AS2#object-types|Object Types]], types ([[URI]]s) originating from vocabularies chosen by an 
application domain MAY be specified.

In case the AS2 object is an *Artifact*, it MUST specify the *Artifact*’s [[URL]] and it is RECOMMENDED 
that this [[URL]] supports auto-discovery mechanisms (e.g. a typed link in the HTTP Link header) to 
allow network clients to obtain additional information about the *Artifact*.  Such additional information 
pertaining to the *Artifact* MAY also be provided inline as part of the value of the AS2 object. 

In case the AS2 object is a *Service Result*:

- If the *Service Result* is a Web resource identified by a [[URL]], that [[URL]] MUST be provided as 
the value of the AS2 object;
- If the *Service Result* is not a Web resource identified by a [[URL]], it is provided inline as the 
value of the AS2 object. 
    - As a special case, a *Service Result* can be linkages, in which case the AS2 activity type is 
    `as:Relationship` and linkages are provided using AS2’s subject/relationship/object construct.

<div class="example">
In EXAMPLE 1, Alice’s *Artifact* is the AS2 object and its [[URL]] 
`https://acme.org/artifacts/alice/five_steps_to_success.html` is provided as the value of the object property. 
</div>

<div class="example">
In EXAMPLE 2, Bob’s *Service Result* is the AS2 object and its [[URL]] 
`https://infinity.science.com/artifacts/bob/review_123.html` is provided as the value of the object property.
</div>

<div class="example">
Bob announces a linkage between Alice’s Artifact and his review thereof:

- The *Service Result* is a relationship of type `http://purl.org/spar/cito/reviews` between Bob’s 
review and Alice’s *Artifact*.
- Bob is the *Agent* acting on behalf of *Service Node* Infiniti science publishing.
- Alice is the *Agent* acting on behalf of a *Data Node* that has made her *Artifact* 
`https://acme.org/artifacts/alice/five_steps_to_success.html` available and that makes her 
LDN Inbox https://acme.org/inbox/alice discoverable.

<pre class=include-code>
path: examples/example3.jsonld
highlight: json
show: 
</pre>
</div>

## AS2 actor, AS2 origin, and AS2 target ## {#ActivityAddressing}

An LDN/AS2 notification:

- MUST specify the *Agent* that sends the notification, expressed by means of the as:actor property and 
its value MUST be a [[URL]] that identifies the *Agent*;
- MAY additionally specify the LDN Sender software component that was responsible for sending the 
notification on behalf of the *Agent*, expressed by means of the `as:origin` predicate and its value 
MUST be a [[URL]] that identifies the software component;
- MAY specify the *Agent* to which the notification is addressed, expressed by means of the `as:target` 
predicate and its value MUST be a [[URL]] that identifies the *Agent*.

For both `as:actor`, `as:origin`, and `as:target`, one of the core [[AS2#actor-types|AS2 Actor Types]] 
MUST be expressed. In addition to these [[AS2#actor-types|AS2 Actor Types]], types ([[URI]]s) originating 
from vocabularies chosen by an application domain MAY be specified. 

Both `as:actor`, `as:origin`, and `as:target` SHOULD have an LDN Inbox. The [[URL]] of the LDN Inbox: 

- Can be provided as the value of `ldp:inbox` in the description of these entities in the notification 
payload;
- Can be discovered as the link target of a link with the `http://www.w3.org/ns/ldp#inbox` link 
relation type provided in the HTTP  Link  response header of the [[URL]] of the LDN Inbox.

<div class=example>
In EXAMPLE 5:

- Bob is the *Agent* that sends the notification: the [[URL]] that identifies Bob, the [[URL]] 
of Bob’s LDN Inbox, two actor types (an AS2 Actor Type and another), as well as Bob’s name are 
provided in the `as:actor` property of the notification payload. 
- Bob uses an application to send the notification. Information about the application is provided 
in the `as:orgin` property. 
- Bob addresses his notification to Alice. Information about Alice is provided in the `as:target` 
property, and includes the [[URL]]] that identifies Alice, the [[URL]] of her LDN Inbox, and her 
AS2 Actor Type. 
</div>

## AS2 context ## {#ActivityContext}

When sending a notification to a *Data Node* that pertains to one of the *Artifacts* it makes 
available, the LDN/AS2 notification SHOULD include the `as:context` property and SHOULD convey 
the *Artifact*’s [[URL]] as its value. This specification accords no specific meaning to the 
use of `as:context` for notifications sent to a *Service Node*.

For `as:context`, one of the core [[AS2#object-types|Object Types]] MAY be expressed. In addition 
to these [[AS2#object-types|Object Types]], types ([URIs]) originating from vocabularies chosen by 
an application domain MAY be specified.

<div class=example>
In EXAMPLE 2 and EXAMPLE 5, Bob sends notifications about *Service Results* that pertain to 
Alice’s *Artifact*. The [[URL]] `https://acme.org/artifacts/alice/five_steps_to_success.html` of that 
*Artifact* is provided in the `as:context` property of these notifications. 
</div>

<div class=example>
In EXAMPLE 1, Alice sends a notification announcing the availability of her *Artifact*.  The [[URL]] of 
the *Artifact* is provided using the `as:object` property whereas as:context is not used because the 
announcement does not pertain to an *Artifact* that is made available at the recipient’s end.
</div>

Network communication patterns {#NetworkCommunicationPatterns}
==============================

In the decentralized network, nodes, in particular the actors that are responsible for the artifacts and services 
on these nodes, communicate by sending LDN/AS2 messages to each other. These messages are 
delivered to LDN Inboxes that are made available on the data and service nodes on behalf of the actors managing 
the artifacts and services on these nodes. 

Depending on the type of interaction an actor is a sender or receiver of messages. This specification describes 
two communication patterns between the nodes in the network. 

*One-way*

The first pattern describes the communication as **one-way**, expressing facts like "I did this activity on an 
artifact". These messages don't expect a response back from other actors in the network.

In general, a one-way  pattern is informative between two communicating Nodes. The Node that initiates the 
communication, does not expect a reply from the receiving Node. The one-way pattern is used when the 
receiving Actor at a node B needs to be made aware of an activity pertaining to a resource hosted by the 
sender at Node A, but does not necessarily need to respond. When the LDN Sender is a Data Node, the resource 
is an Artifact. When the LDN Sender is a service node the resource is a Service result.

*Request-response* 

A second communication pattern entails a more elaborate back an forth communication pattern 
regading the provision, by a *Service Node*, of a value-added service for an *Artifact* that
is made available by a *Data Node*. In a **request-response** communication regarding the 
provision of a service, notifications can be exchanged between Nodes over time spans that could
be near immediate, but could also span days, weeks or even months. The manner in which a 
service is provided is not in scope of this specification. Considered is only when a *Service Node*
is willing to provide a requested service or not, and if so, what the *Service Result* is.

In general, the request-response pattern is transactional. The initiator of a request notification 
expects the receiver, to send a response notification with the result of some value-added service.  
The request-response pattern is used when the receiving actor at Node B is requested to provide a 
service pertaining to an Artifact hosted by the sender at Node A; the answer to the 
service request is delivered as a response notification. This pattern can optionally include an acknowledgment 
phase, where, prior to providing the service, the receiving Agent can send an acknowledgement notification 
to indicate whether or not it commits to providing the service requested by the request notification.

## One-way : Data Node to Service Node ## {#OneWayPatternDNSN}

<pre class='include'>
path: images/one_way_data_node.svg
</pre>

*Figure 2: A Data Node sends a notification about an Artifact to a Service Node.*

The **one-way Data Node to Service Node** pattern is used for sending an informative message pertaining to an Artifact to another Agent 
in the network. In the case of Data Nodes, one-way patterns could be used to inform an Agent about CRUD (Create, 
Read, Update, Delete) actions on artifacts. In these use-cases these messages are generated by automated processes 
that monitor artifacts. Another use-case for a one-way pattern are Announce actions to inform an Agent about 
the existence of an Artifact (for instance, to inform a search engine about the existence of a Web page).

*Payload*

<table>
<thead>
 <tr>
 <th>Requirements</th>
 <td></td>
 </tr>
</thead>
<tbody>
 <tr>
 <th>Required</th>
 <td>**id** (*Activity Identifier*)</td>
</tbody>
 <tr>
 <td></td>
 <td>*RDF Properties*</td>
 </tr>
<tbody>
 <tr>
  <th>Required</id>
  <td>**rdf:type** , **as:actor** , **as:object**</td>
 </tr>
 <tr>
  <th>Recommended</id>
  <td>**as:origin**, **as:target**</td>
 </tr>
 <tr>
  <th>Not used</th>
  <td>**as:context** , **as:inReplyTo**</td>
 </tr> 
</tbody>
</table>

The LDN/AS2 payload MUST have the following properties:

<dl>
 <dt>id</dt>
 <dd>The activity identifier: this contain the actitivity identifier, and is a valid [[URI]] 
 (See also [Identifying an activity](#Identifying#))</dd>

 <dt>rdf:type</dt>
 <dd>The activity type: one of the types [[activitystreams-vocabulary#Create|as:Create]], 
 [[activitystreams-vocabulary#Remove|as:Remove]], [[activitystreams-vocabulary#Update|as:Update]], or 
 [[activitystreams-vocabulary#Announce|as:Announce]]. The field MAY also have an additional generic subtype of
 [[activitystreams-vocabulary#Activity|as:Activity]].</dd>

 <dt>as:actor</dt>
 <dd>The Agent that performed the activity: contains at least the [[URI]] identifying the Agent.
 Optionally, an in-band or out-of-band description of the Agent may be provided (See [Addressing the receiver and sender](#ActivityAddressing)).</dd>

 <dt>as:object</dt>
 <dd>The Artifact that is the subject of the activity: contains at least the [[URL]] identifying
 the Artifact on the Data Node. Optionaly, an in-band or out-of-band description of the Artifact may
 be provided (See [The Object of an activity](#ActivityObject)))</dd>
</dl>

The LDN/AS2 payload MAY have the following properties:

<dl>
<dt>as:origin</dt>
<dd>The software component that was responsible for sending the activity over the network. When used
it contains at least a [[URI]] identifying the component. Optionally, an in-band or out-of-band
description of the Agent may be provided.</dd>

<dt>as:target</dt>
<dd>The intended Agent for receiving the notification: contains at least the [[URI]] identifying the Agent.
 Optionally, an in-band or out-of-band description of the Agent may be provided 
(See [Addressing the receiver and sender](#ActivityAddressing)).</dd>
</dl>

The LDN/AS2 payload SHOULD NOT use the following properties:

<dl>
<dt>as:context</dt>
<dd>Not in use by a sending Data Node.</dd>

<dt>as:inReplyTo</dt>
<dd>Not in use by a sending Data Node.</dd>
</dl>

<div class=example>
The ACME Research Institute (Data Node) notifies Infinity Science (Service Node) in 
a one-way pattern about the creation of the new Artifact http://acme.org/artifacts/alice/five_steps_to_success.html.

<pre class=include-code>
path: examples/example_ow_dn_sn.jsonld
highlight: json
show: 
</pre>
</div>

## One-way: Service Node to Data Node ## {#OneWayPatternSNDN}

<pre class='include'>
path: images/one_way_service_node.svg
</pre>

*Figure 3: A Service Node sends a notification about a Service Result pertaining to an Artifact
to a Data Node.* 

The **one-way Service Node to Data Node** pattern is use to send unsolicited notifications about 
value-added services pertaining to Artifacts on a Data Node to LDN Inbox that is associated
with that Artifact. The Service Node has created a value-added service, a Service Result, for 
an Artifact on the Data Node and wants to inform some Agent at the side of Data Node about 
this fact. The Service Result doesn't have an associated LDN Inbox (is not part of a Data Node).

*Payload*

<table>
<thead>
 <tr>
 <th>Requirements</th>
 <td></td>
 </tr>
</thead>
<tbody>
 <tr>
 <th>Required</th>
 <td>**id** (*Activity Identifier*)</td>
</tbody>
 <tr>
 <td></td>
 <td>*RDF Properties*</td>
 </tr>
<tbody>
 <tr>
  <th>Required</id>
  <td>**rdf:type** , **as:actor** , **as:context**, **as:object**</td>
 </tr>
 <tr>
  <th>Recommended</id>
  <td>**as:origin**, **as:target**</td>
 </tr>
 <tr>
  <th>Not used</th>
  <td>**as:inReplyTo**</td>
 </tr> 
</tbody>
</table>

The LDN/AS2 payload MUST have the following properties:

<dl>
 <dt>id</dt>
 <dd>The activity identifier: this contain the actitivity identifier, and is a valid [[URI]] 
 (See also [Identifying an activity](#Identifying#))</dd>

 <dt>rdf:type</dt>
 <dd>The activity type: the type [[activitystreams-vocabulary#Announce|as:Announce]]. The field
 MAY also have an additional generic subtype of [[activitystreams-vocabulary#Activity|as:Activity]].</dd>

 <dt>as:actor</dt>
 <dd>The Agent that performed the activity: contains at least the [[URI]] identifying the Agent.
 Optionally, an in-band or out-of-band description of the Agent may be provided 
 (See [Addressing the receiver and sender](#ActivityAddressing)).</dd>

 <dt>as:context</dt>
 <dd>The Artifact on the Data Node for which a value-added service was provided: contains the [[URL]]
 of the Artifact on the corresponding Data Node</dd>

 <dt>as:object</dt>
 <dd>The Service Result of the value-added service provided for an Artifact on the Data Node: contains 
 at least an in-band or out-of-band description of the Service Result is provided 
 (See [The Object of an activity](#ActivityObject))).</dd>

</dl>

The LDN/AS2 payload MAY have the following properties:

<dl>
<dt>as:origin</dt>
<dd>The software component that was responsible for sending the activity over the network. When used
it contains at least a [[URI]] identifying the component. Optionally, an in-band or out-of-band
description of the Agent may be provided.</dd>

<dt>as:target</dt>
<dd>The intended Agent for receiving the notification: contains at least the [[URI]] identifying the Agent.
 Optionally, an in-band or out-of-band description of the Agent may be provided 
(See [Addressing the receiver and sender](#ActivityAddressing)).</dd>
</dl>

The LDN/AS2 payload SHOULD NOT use the following properties:

<dl>
<dt>as:inReplyTo</dt>
<dd>Not in use by a sending Service Node in the one-way pattern.</dd>
</dl>

<div class=example>
The Fairfield City Repository (Service Node) notifies ACME Research Institute (Data Node) in a one-way pattern about the creation of an archival copy Service Result https://darwin.fairfield.org/objects/317831-13210
related to ACME's Artifact http://acme.org/artifacts/alice/five_steps_to_success.html.

<pre class=include-code>
path: examples/example_ow_sn_dn.jsonld
highlight: json
show: 
</pre>
</div>

## One-way: Service Node to Service Node ## {#OneWayPatternSNSN}

<pre class='include'>
path: images/one_way_service_node_service_node.svg
</pre>

*Figure 4: Service Node A sends a notification about a Service Result pertaining to an Artifact
of some Data Node to another Service Node B.* 

The **one-way Service Node to Service Node** pattern is used to forward unsolicited Service Results 
from one Service Node to another Service Node. The Service Result describes a 
value-added service pertaining to a Artifact on a Data Node.

*Payload*

<table>
<thead>
 <tr>
 <th>Requirements</th>
 <td></td>
 </tr>
</thead>
<tbody>
 <tr>
 <th>Required</th>
 <td>**id** (*Activity Identifier*)</td>
</tbody>
 <tr>
 <td></td>
 <td>*RDF Properties*</td>
 </tr>
<tbody>
 <tr>
  <th>Required</id>
  <td>**rdf:type** , **as:actor** , **as:context** , **as:object**</td>
 </tr>
 <tr>
  <th>Recommended</id>
  <td>**as:origin**, **as:target**</td>
 </tr>
 <tr>
  <th>Not used</th>
  <td>**as:inReplyTo**</td>
 </tr> 
</tbody>
</table>

The LDN/AS2 payload MUST have the following properties:

<dl>
 <dt>id</dt>
 <dd>The activity identifier: this contain the actitivity identifier, and is a valid [[URI]] 
 (See also [Identifying an activity](#Identifying#))</dd>

 <dt>rdf:type</dt>
 <dd>The activity type: the type [[activitystreams-vocabulary#Announce|as:Announce]]. The field
 MAY also have an additional generic subtype of [[activitystreams-vocabulary#Activity|as:Activity]].</dd>

 <dt>as:actor</dt>
 <dd>The Agent that performed the activity: contains at least the [[URI]] identifying the Agent.
 Optionally, an in-band or out-of-band description of the Agent may be provided 
 (See [Addressing the receiver and sender](#ActivityAddressing)).</dd>

 <dt>as:context</dt>
 <dd>The Artifact on a Data Node for which a value-added service was provided: contains the [[URL]]
 of the Artifact on the corresponding Data Node</dd>

 <dt>as:object</dt>
 <dd>The Service Result of the value-added service provided for an Artifact on the Data Node: contains 
 at least an in-band or out-of-band description of the Service Result is provided 
 (See [The Object of an activity](#ActivityObject))).</dd>

</dl>

The LDN/AS2 payload MAY have the following properties:

<dl>
<dt>as:origin</dt>
<dd>The software component that was responsible for sending the activity over the network. When used
it contains at least a [[URI]] identifying the component. Optionally, an in-band or out-of-band
description of the Agent may be provided.</dd>

<dt>as:target</dt>
<dd>The intended Agent for receiving the notification: contains at least the [[URI]] identifying the Agent.
 Optionally, an in-band or out-of-band description of the Agent may be provided 
(See [Addressing the receiver and sender](#ActivityAddressing)).</dd>
</dl>

The LDN/AS2 payload SHOULD NOT use the following properties:

<dl>
<dt>as:inReplyTo</dt>
<dd>Not in use by a sending Service Node in the one-way pattern.</dd>
</dl>

<div class=example>
The Fairfield City Repository (Service Node) notifies the Arsip Nasional Republik 
Indonesia (Service Node) in a one-way pattern about the creation of an archival copy Service Result
https://darwin.fairfield.org/objects/317831-13210 of an Artifact at the ACME Research Institute 
(Data Node).

<pre class=include-code>
path: examples/example_ow_sn_sn.jsonld
highlight: json
show: 
</pre>
</div>

## Request-response: Data Node to Service Node ## {#RequestResponsePatternDNSN}

The **request-response Data Node to Service Node** pattern is used in more elaborate communication 
processes, in cases where Agents on behalf of a Data Node need to ask for services from a Service Node 
and no direct results can be expected. This style of communication expects that the updates to the 
life cycle of Artifacts can take hours, days or months to be processed. In these cases, it would be 
impractical to wait for an answer from the Service Node, or require software to poll a Web service 
for status updates. 

The request-response Data Node to Service Node pattern starts by sending an *Offer* notification
payload pertaining to an Artifact from a Data Node to a Service Node requesting a value-added 
service. 

The Service Node MAY evaluate the Offer and can decide if it can commit to providing services on 
the Artifact. In the form of an acknowledgment or rejection this information can be replied to the 
Data Node.

The Service Node now starts an internal process (which is not in scope of this specification) to 
fulfill the service request. The end result of the internal process SHOULD BE the announcement of a 
Service Result, or a rejection without a new Service Result being created. 

A Data Node MAY cancel notification to cancel a value-added service request by sending an
*Undo* notification pertaining to an *Offer* to the Service Node. This Undo is notification
is just informative, a Service Node MAY or MAY NOT use this information to cancel some
internal process. These notifications MAY be send at any stage of the request-response pattern.

### Data Node sends offer ### {#RequestResponsePatternDNSNOffer}

<pre class='include'>
path: images/request_response_data_node_offer.svg
</pre>

*Figure 5: A Data Node sends an Offer to a Service Node requesting a value-added service
for one of its Artifacts.*

The request-response Data Node to Service Node pattern starts sending an *Offer*
pertaining to an Artifact from a Data Node to a Service Node.

*Payload* 

<table>
<thead>
 <tr>
 <th>Requirements</th>
 <td></td>
 </tr>
</thead>
<tbody>
 <tr>
 <th>Required</th>
 <td>**id** (*Activity Identifier*)</td>
</tbody>
 <tr>
 <td></td>
 <td>*RDF Properties*</td>
 </tr>
<tbody>
 <tr>
  <th>Required</id>
  <td>**rdf:type** , **as:actor** , **as:object**</td>
 </tr>
 <tr>
  <th>Recommended</id>
  <td>**as:origin**, **as:target**</td>
 </tr>
 <tr>
  <th>Not used</th>
  <td>**as:context** , **as:inReplyTo**</td>
 </tr> 
</tbody>
</table>

The LDN/AS2 payload MUST have the following properties:

<dl>
 <dt>id</dt>
 <dd>The activity identifier: this contain the actitivity identifier, and is a valid [[URI]] 
 (See also [Identifying an activity](#Identifying#))</dd>

 <dt>rdf:type</dt>
 <dd>The activity type: the type [[activitystreams-vocabulary#Offer|as:Offer]]. The field
 MAY also have an additional generic subtype of [[activitystreams-vocabulary#Activity|as:Activity]].</dd>

 <dt>as:actor</dt>
 <dd>The Agent that performed the activity: contains at least the [[URI]] identifying the Agent.
 Optionally, an in-band or out-of-band description of the Agent may be provided 
 (See [Addressing the receiver and sender](#ActivityAddressing)).</dd>

 <dt>as:object</dt>
 <dd>The Artifact that is the subject of the activity: contains at least the [[URL]] identifying
 the Artifact on the Data Node. Optionaly, an in-band or out-of-band description of the Artifact may
 be provided (See [The Object of an activity](#ActivityObject))).</dd>
</dl>

The LDN/AS2 payload MAY have the following properties:

<dl>
<dt>as:origin</dt>
<dd>The software component that was responsible for sending the activity over the network. When used
it contains at least a [[URI]] identifying the component. Optionally, an in-band or out-of-band
description of the Agent may be provided.</dd>

<dt>as:target</dt>
<dd>The intended Agent for receiving the notification: contains at least the [[URI]] identifying the Agent.
 Optionally, an in-band or out-of-band description of the Agent may be provided 
(See [Addressing the receiver and sender](#ActivityAddressing)).</dd>
</dl>

The LDN/AS payloads SHOULD NOT use the following properties:

<dl>
<dt>as:context</dt>
<dd>Not in use by a sending Data Node.</dd>

<dt>as:inReplyTo</dt>
<dd>Not in use by a sending Data Node.</dd>
</dl>

<div class=example>
The ACME Research Institute (Data Node) notifies the Data Archive XYZ 
(Service Node) in a request-response pattern about the Artifact  
http://acme.org/artifacts/alice/data-set-2022-01-19.zip on ACME's system they want
to Offer for archivation.

<pre class=include-code>
path: examples/example_rr_dn_sn_request.jsonld
highlight: json
show: 
</pre>
</div>

### Data Node cancels offer ### {#RequestResponsePatternDNSNUndo}

<pre class='include'>
path: images/request_response_data_node_cancel.svg
</pre>

*Figure 6: A Data Node sends an Undo notification to a Service Node cancelling its previous
Offer notification.*

A Data Node MAY at any point send an informative *Undo* notification to a Service Node
to cancel a previously send *Offer*. A Service Node MAY or MAY NOT use this
information to cancel some interal process.

*Payload* 

<table>
<thead>
 <tr>
 <th>Requirements</th>
 <td></td>
 </tr>
</thead>
<tbody>
 <tr>
 <th>Required</th>
 <td>**id** (*Activity Identifier*)</td>
</tbody>
 <tr>
 <td></td>
 <td>*RDF Properties*</td>
 </tr>
<tbody>
 <tr>
  <th>Required</id>
  <td>**rdf:type** , **as:actor** , **as:object**</td>
 </tr>
 <tr>
  <th>Should</id>
  <td>**as:context**</td>
 </tr>
 <tr>
  <th>Recommended</id>
  <td>**as:origin**, **as:target**</td>
 </tr>
 <tr>
  <th>Not used</th>
  <td>**as:inReplyTo**</td>
 </tr> 
</tbody>
</table>

The LDN/AS2 payload MUST have the following properties:

<dl>
 <dt>id</dt>
 <dd>The activity identifier: this contain the actitivity identifier, and is a valid [[URI]] 
 (See also [Identifying an activity](#Identifying#))</dd>

 <dt>rdf:type</dt>
 <dd>The activity type: the type [[activitystreams-vocabulary#Offer|as:Offer]]. The field
 MAY also have an additional generic subtype of [[activitystreams-vocabulary#Activity|as:Activity]].</dd>

 <dt>as:actor</dt>
 <dd>The Agent that performed the activity: contains at least the [[URI]] identifying the Agent.
 Optionally, an in-band or out-of-band description of the Agent may be provided 
 (See [Addressing the receiver and sender](#ActivityAddressing)).</dd>

 <dt>as:object</dt>
 <dd>The previous Offer activity that this undo tries to cancel: contains at least the [[URI]] identifying
 the previous activity. Optionaly, an in-band or out-of-band description of the previous activity may
 be provided (See [The Object of an activity](#ActivityObject)))</dd>
</dl>

The LDN/AS2 payload SHOULD have the following properties:

<dl>
<dt>as:context</dt>
<dd>The original Artifact in a notification thread, ie. the **object** of the previous activity that 
this undo is trying to cancel. This MUST contain at least a [[URL]] identifying the Artifact and MAY provide an in-band or 
out-of-band description (See [The Object of an activity](#ActivityObject)).</dd>
</dl>

The LDN/AS2 payload MAY have the following properties:

<dl>
<dt>as:origin</dt>
<dd>The software component that was responsible for sending the activity over the network. When used
it contains at least a [[URI]] identifying the component. Optionally, an in-band or out-of-band
description of the Agent may be provided.</dd>

<dt>as:target</dt>
<dd>The intended Agent for receiving the notification: contains at least the [[URI]] identifying the Agent.
 Optionally, an in-band or out-of-band description of the Agent may be provided 
(See [Addressing the receiver and sender](#ActivityAddressing)).</dd>
</dl>

The LDN/AS2 payload SHOULD NOT use the following properties:

<dl>
<dt>as:inReplyTo</dt>
<dd>Not in use by a sending Data Node.</dd>
</dl>

<div class=example>
The ACME Research Institute (Data Node) sends a cancelation to 
Data Archive XYZ (Service Node) of the Offer that was sent in Example 12.

<pre class=include-code>
path: examples/example_rr_dn_sn_cancel.jsonld
highlight: json
show: 
</pre>
</div>

### Service Node acknowledges ### {#RequestResponsePatternDNSNAcknowledge}

<pre class='include'>
path: images/request_response_service_node_acknowledge.svg
</pre>

*Figure 7: A Service Node optionally acknowledges a previously sent Offer that was
sent by a Data Node.*

The Service Node MAY evaluate the Offer that was sent by the Data Node and can decide 
if it can commit to providing services on the Artifact. In the form of an *Accept* or 
*Reject* this information is be replied to the Data Node.

*Payload*

<table>
<thead>
 <tr>
 <th>Requirements</th>
 <td></td>
 </tr>
</thead>
<tbody>
 <tr>
 <th>Required</th>
 <td>**id** (*Activity Identifier*)</td>
</tbody>
 <tr>
 <td></td>
 <td>*RDF Properties*</td>
 </tr>
<tbody>
 <tr>
  <th>Required</id>
  <td>**rdf:type** , **as:actor** , **as:object**</td>
 </tr>
 <tr>
  <th>Should</id>
  <td>**as:context**, **as:inReplyTo**</td>
 </tr>
 <tr>
  <th>Recommended</id>
  <td>**as:origin**, **as:target**</td>
 </tr>
</tbody>
</table>

The LDN/AS2 payload MUST have the following properties:

<dl>
 <dt>id</dt>
 <dd>The activity identifier: this contain the actitivity identifier, and is a valid [[URI]] 
 (See also [Identifying an activity](#Identifying#))</dd>

 <dt>rdf:type</dt>
 <dd>The activity type: one of the type [[activitystreams-vocabulary#Accept|as:Accept]] or 
 [[activitystreams-vocabulary#Reject|as:Reject]]. The field MAY also have an additional generic 
 subtype of [[activitystreams-vocabulary#Activity|as:Activity]].</dd>

 <dt>as:actor</dt>
 <dd>The Agent that performed the activity: contains at least the [[URI]] identifying the Agent.
 Optionally, an in-band or out-of-band description of the Agent may be provided 
 (See [Addressing the receiver and sender](#ActivityAddressing)).</dd>

 <dt>as:object</dt>
 <dd>The previous Offer activity that this acknowledgment is replying to: contains at least the [[URI]] identifying
 the previous activity. Optionaly, an in-band or out-of-band description of the previous activity may
 be provided (See [The Object of an activity](#ActivityObject))).</dd>
</dl>

The LDN/AS2 payload SHOULD have the following properties:

<dl>
<dt>as:context</dt>
<dd>The original Artifact in a notification thread, ie. the **object** of the previous activity that 
this acknowledgement is replying to. This MUST contain at least a [[URL]] identifying the Artifact and MAY provide an in-band or 
out-of-band description (See [The Object of an activity](#ActivityObject)).</dd>

<dt>as:inReplyTo</dt>
<dd>Points to the activity identifier of the request notification to which this activity is a response. 
In an offer acknowledgment notification, this MUST be equivalent to the value of the **object** property. 
It MUST be a [[URI]] and MAY NOT have further in-band description.</dd>
</dl>

The LDN/AS2 payload MAY have the following properties:

<dl>
<dt>as:origin</dt>
<dd>The software component that was responsible for sending the activity over the network. When used
it contains at least a [[URI]] identifying the component. Optionally, an in-band or out-of-band
description of the Agent may be provided.</dd>

<dt>as:target</dt>
<dd>The intended Agent for receiving the notification: contains at least the [[URI]] identifying the Agent.
 Optionally, an in-band or out-of-band description of the Agent may be provided 
(See [Addressing the receiver and sender](#ActivityAddressing)).</dd>
</dl>

<div class=example>
The Data Archive XYZ (Service Node) notifies the ACME Research Institute 
(Data Node) in a request-response pattern that it accepts the offer ACME sent in a
previous activity notification.

<pre class=include-code>
path: examples/example_rr_dn_sn_acknowledge.jsonld
highlight: json
show: 
</pre>
</div>

### Service Node responds ### {#RequestResponsePatternDNSNAnnounce}

<pre class='include'>
path: images/request_response_service_node_responds.svg
</pre>

*Figure 8: The Service Node has a Service Result available pertaining to the Artifact
on the Data Node. The Service Node sends an Announce notification to the Data Node about
this fact.*

The Service Node SHOULD as result of an internal process on the Artifact announce a new
Service Result, or reject the offer of the Data Node without a new Service Result being
created (See [Service Node Rejects](#RequestResponsePatternDNSNReject)). 

*Payload*

<table>
<thead>
 <tr>
 <th>Requirements</th>
 <td></td>
 </tr>
</thead>
<tbody>
 <tr>
 <th>Required</th>
 <td>**id** (*Activity Identifier*)</td>
</tbody>
 <tr>
 <td></td>
 <td>*RDF Properties*</td>
 </tr>
<tbody>
 <tr>
  <th>Required</id>
  <td>**rdf:type** , **as:actor** , **as:object**</td>
 </tr>
 <tr>
  <th>Should</id>
  <td>**as:context**, **as:inReplyTo**</td>
 </tr>
 <tr>
  <th>Recommended</id>
  <td>**as:origin**, **as:target**</td>
 </tr>
</tbody>
</table>

The LDN/AS2 payload MUST have the following properties:

<dl>
 <dt>id</dt>
 <dd>The activity identifier: this contain the actitivity identifier, and is a valid [[URI]] 
 (See also [Identifying an activity](#Identifying#))</dd>

 <dt>rdf:type</dt>
 <dd>The activity type: one of type [[activitystreams-vocabulary#Announce|as:Announce]]. The
 field MAY also have an additional generic subtype of [[activitystreams-vocabulary#Activity|as:Activity]].</dd>

 <dt>as:actor</dt>
 <dd>The Agent that performed the activity: contains at least the [[URI]] identifying the Agent.
 Optionally, an in-band or out-of-band description of the Agent may be provided 
 (See [Addressing the receiver and sender](#ActivityAddressing)).</dd>

 <dt>as:object</dt>
 <dd>The Service Result of the value-added service provided for an Artifact on the Data Node: contains 
 at least an in-band or out-of-band description of the Service Result is provided 
 (See [The Object of an activity](#ActivityObject))).</dd>
</dl>

The LDN/AS2 payload SHOULD have the following properties:

<dl>
<dt>as:context</dt>
<dd>The original Artifact in a notification thread, ie. the **object** of the previous activity that 
this acknowledgement is replying to. This MUST contain at least a [[URL]] identifying the Artifact and MAY provide an in-band or 
out-of-band description (See [The Object of an activity](#ActivityObject)).</dd>

<dt>as:inReplyTo</dt>
<dd>Points to the activity identifier of the request notification to which this activity is a response. 
In an offer acknowledgment notification, this MUST be equivalent to the value of the **object** property. 
It MUST be a [[URI]] and MAY NOT have further in-band description.</dd>
</dl>

The LDN/AS2 payload MAY have the following properties:

<dl>
<dt>as:origin</dt>
<dd>The software component that was responsible for sending the activity over the network. When used
it contains at least a [[URI]] identifying the component. Optionally, an in-band or out-of-band
description of the Agent may be provided.</dd>

<dt>as:target</dt>
<dd>The intended Agent for receiving the notification: contains at least the [[URI]] identifying the Agent.
 Optionally, an in-band or out-of-band description of the Agent may be provided 
(See [Addressing the receiver and sender](#ActivityAddressing)).</dd>
</dl>

<div class=example>
The Data Archive XYZ (Service Node) notifies the ACME Research Institute 
(Data Node) in a request-response pattern that it announces a new Service Result 
pertaining to ACME's Artifact http://acme.org/artifacts/alice/data-set-2022-01-19.zip.

<pre class=include-code>
path: examples/example_rr_dn_sn_response.jsonld
highlight: json
show: 
</pre>
</div>

### Service Node rejects ### {#RequestResponsePatternDNSNReject}

<pre class='include'>
path: images/request_response_service_node_acknowledge.svg
</pre>

*Figure 9: The Service Node is not able to create a Service Result for a Artifact. The
Service Node optionally sends a Reject notification back to the Data Node.*

In case the Service Node is not able to fulfill the value-added service on an 
Artifact, it MAY notifiy the Data Node about this fact by sending a Reject notification.

*Payload*

<table>
<thead>
 <tr>
 <th>Requirements</th>
 <td></td>
 </tr>
</thead>
<tbody>
 <tr>
 <th>Required</th>
 <td>**id** (*Activity Identifier*)</td>
</tbody>
 <tr>
 <td></td>
 <td>*RDF Properties*</td>
 </tr>
<tbody>
 <tr>
  <th>Required</id>
  <td>**rdf:type** , **as:actor** , **as:object**</td>
 </tr>
 <tr>
  <th>Should</id>
  <td>**as:context**</td>
 </tr>
 <tr>
  <th>Recommended</id>
  <td>**as:origin**, **as:target**</td>
 </tr>
 <tr>
  <th>Not used</th>
  <td>**as:inReplyTo**</td>
 </tr> 
</tbody>
</table>

The LDN/AS2 payload MUST have the following properties:

<dl>
 <dt>id</dt>
 <dd>The activity identifier: this contain the actitivity identifier, and is a valid [[URI]] 
 (See also [Identifying an activity](#Identifying#))</dd>

 <dt>rdf:type</dt>
 <dd>The activity type: the type [[activitystreams-vocabulary#Reject|as:Reject]]. The field MAY also have an additional 
 generic subtype of [[activitystreams-vocabulary#Activity|as:Activity]].</dd>

 <dt>as:actor</dt>
 <dd>The Agent that performed the activity: contains at least the [[URI]] identifying the Agent.
 Optionally, an in-band or out-of-band description of the Agent may be provided 
 (See [Addressing the receiver and sender](#ActivityAddressing)).</dd>

 <dt>as:object</dt>
 <dd>The previous Offer activity that this acknowledgment is replying to: contains at least the [[URI]] identifying
 the previous activity. Optionaly, an in-band or out-of-band description of the previous activity may
 be provided (See [The Object of an activity](#ActivityObject))).</dd>
</dl>

The LDN/AS2 payload SHOULD have the following properties:

<dl>
<dt>as:context</dt>
<dd>The original Artifact in a notification thread, ie. the **object** of the previous activity that 
this acknowledgement is replying to. This MUST contain at least a [[URL]] identifying the Artifact and MAY provide an in-band or 
out-of-band description (See [The Object of an activity](#ActivityObject)).</dd>

<dt>as:inReplyTo</dt>
<dd>Points to the activity identifier of the request notification to which this activity is a response. 
In an offer acknowledgment notification, this MUST be equivalent to the value of the **object** property. 
It MUST be a [[URI]] and MAY NOT have further in-band description.</dd>
</dl>

The LDN/AS2 payload MAY have the following properties:

<dl>
<dt>as:origin</dt>
<dd>The software component that was responsible for sending the activity over the network. When used
it contains at least a [[URI]] identifying the component. Optionally, an in-band or out-of-band
description of the Agent may be provided.</dd>

<dt>as:target</dt>
<dd>The intended Agent for receiving the notification: contains at least the [[URI]] identifying the Agent.
 Optionally, an in-band or out-of-band description of the Agent may be provided 
(See [Addressing the receiver and sender](#ActivityAddressing)).</dd>
</dl>

<div class=example>
The Data Archive XYZ (Service Node) notifies the ACME Research Institute 
(Data Node) in a request-response pattern that it rejects the offer ACME sent in a previous 
activity notification.

<pre class=include-code>
path: examples/example_rr_dn_sn_response_reject.jsonld
highlight: json
show: 
</pre>
</div>

## Request-response: Service Node to Service Node ## {#RequestResponsePatternSNSN}

In some use-cases a Service Node needs the help of other Service Nodes in the network to
provide value-added services to an Artifact from a Data Node in the network. In these 
cases, a Service Node can forward a Service Result to another Service Node and ask for 
futher value-added services.

The **request-response Service Node to Service Node** pattern is used when an Agent on behalf
of a Service Node needs to ask for a service from another Service Node and no direct results can
be expected.  This style of communication expects that the updates service processes can take hours, 
days or months to be processed. In these cases, it would be impractical to wait for an answer 
from the Service Node, or require software to poll a Web service for status updates. 

The request-response Service Node to Service Node pattern starts by Service Node (A) sending
an *Offer* LDN/AS2 payload pertaining to Service Result to another Service Node (B)
requesting a value-added service. 

Service Node (B) MAY evaluate the Offer and can decide if it can commit to providing services on 
the Service Result. In the form of an acknowledgment or rejection this information 
can be replied to Service Node (A).

Service Node (B) now starts an internal process (which is not in scope of this specification) to 
fulfill the service request. The end result of the internal process SHOULD BE the announcement of a 
Service Result, or a rejection without a new Service Result being created. 

Service Node (A) MAY cancel notification to cancel a value-added service request by sending an
*Undo* notification pertaining to an *Offer* to Service Node (B). This Undo is notification
is just informative, Service Node (B) MAY or MAY NOT use this information to cancel some
internal process. These notifications MAY be send at any stage of the request-response pattern.

### Service Node sends offer ### {#RequestResponsePatternSNSNOffer}

<pre class='include'>
path: images/request_response2_service_node_offer.svg
</pre>

*Figure 10: Service Node A sends an Offer to Service Node  B requesting a value-added service
for Service Result related to a Data Node. The Offer could have been triggered by a 
Data Node requesting a value-added service from Service Node A that Service Node A forwards
to Service Node B.*

The request-response Service Node to Service Node pattern starts by Service Node (A) sending an *Offer*
pertaining to a Service Result to a Service Node (B).

*Payload* 

<table>
<thead>
 <tr>
 <th>Requirements</th>
 <td></td>
 </tr>
</thead>
<tbody>
 <tr>
 <th>Required</th>
 <td>**id** (*Activity Identifier*)</td>
</tbody>
 <tr>
 <td></td>
 <td>*RDF Properties*</td>
 </tr>
<tbody>
 <tr>
  <th>Required</id>
  <td>**rdf:type** , **as:actor** , **as:object**</td>
 </tr>
 </tr>
  <th>Recommended</id>
  <td>**as:context, **as:origin**, **as:target**</td>
 </tr>
 <tr>
  <th>Not used</th>
  <td>**as:inReplyTo**</td>
 </tr> 
</tbody>
</table>

The LDN/AS2 payload MUST have the following properties:

<dl>
 <dt>id</dt>
 <dd>The activity identifier: this contain the actitivity identifier, and is a valid [[URI]] 
 (See also [Identifying an activity](#Identifying#))</dd>

 <dt>rdf:type</dt>
 <dd>The activity type: the type [[activitystreams-vocabulary#Offer|as:Offer]]. The field
 MAY also have an additional generic subtype of [[activitystreams-vocabulary#Activity|as:Activity]].</dd>

 <dt>as:actor</dt>
 <dd>The Agent that performed the activity: contains at least the [[URI]] identifying the Agent.
 Optionally, an in-band or out-of-band description of the Agent may be provided 
 (See [Addressing the receiver and sender](#ActivityAddressing)).</dd>

 <dt>as:object</dt>
 <dd>A Service Result that is the subject of the activity: contains at least a [[URI]] 
 identifying the Service Result.  Optionaly, an in-band or out-of-band description of 
 the Service Result may be provided (See [The Object of an activity](#ActivityObject)).</dd>
</dl>

Note: The Service Result MAY be a previous notification that was received from another Node.

The LDN/AS2 payload MAY have the following properties:

<dl>
<dt>as:origin</dt>
<dd>The software component that was responsible for sending the activity over the network. When used
it contains at least a [[URI]] identifying the component. Optionally, an in-band or out-of-band
description of the Agent may be provided.</dd>

<dt>as:target</dt>
<dd>The intended Agent for receiving the notification: contains at least the [[URI]] identifying the Agent.
 Optionally, an in-band or out-of-band description of the Agent may be provided 
(See [Addressing the receiver and sender](#ActivityAddressing)).</dd>
</dl>

The LDN/AS2 payload SHOULD NOT use the following properties:

<dl>
<dt>as:context</dt>
<dd>Not in use by a sending Service Node A.</dd>

<dt>as:inReplyTo</dt>
<dd>Not in use by a sending Data Node.</dd>
</dl>

<div class=example>
The Data Archive XYZ (Service Node A) received an Offer from ACME Research 
Institute (Data Node). Service Node A decides to forward the offer to their Australian
office Data Archive XYZ Australia (Service Node B).

<pre class=include-code>
path: examples/example_rr_sn_sn_request.jsonld
highlight: json
show: 
</pre>
</div>

### Service Node cancels offer ### {#RequestResponsePatternSNSNUndo}

<pre class='include'>
path: images/request_response2_service_node_cancel.svg
</pre>

*Figure 11: Service Node A sends an Undo notification to Service Node B cancelling its previous
Offer notification.*

Service Node A MAY at any point send an informative *Undo* notification to a Service Node B
to cancel a previously send *Offer*. Service Node B MAY or MAY NOT use this information to 
cancel some interal process.

*Payload* 

<table>
<thead>
 <tr>
 <th>Requirements</th>
 <td></td>
 </tr>
</thead>
<tbody>
 <tr>
 <th>Required</th>
 <td>**id** (*Activity Identifier*)</td>
</tbody>
 <tr>
 <td></td>
 <td>*RDF Properties*</td>
 </tr>
<tbody>
 <tr>
  <th>Required</id>
  <td>**rdf:type** , **as:actor** , **as:object**</td>
 </tr>
 <tr>
  <th>Should</id>
  <td>**as:context**</td>
 </tr>
 <tr>
  <th>Recommended</id>
  <td>**as:origin**, **as:target**</td>
 </tr>
 <tr>
  <th>Not used</th>
  <td>**as:inReplyTo**</td>
 </tr> 
</tbody>
</table>

The LDN/AS2 payload MUST have the following properties:

<dl>
 <dt>id</dt>
 <dd>The activity identifier: this contain the actitivity identifier, and is a valid [[URI]] 
 (See also [Identifying an activity](#Identifying#))</dd>

 <dt>rdf:type</dt>
 <dd>The activity type: the type [[activitystreams-vocabulary#Offer|as:Offer]]. The field
 MAY also have an additional generic subtype of [[activitystreams-vocabulary#Activity|as:Activity]].</dd>

 <dt>as:actor</dt>
 <dd>The Agent that performed the activity: contains at least the [[URI]] identifying the Agent.
 Optionally, an in-band or out-of-band description of the Agent may be provided 
 (See [Addressing the receiver and sender](#ActivityAddressing)).</dd>

 <dt>as:object</dt>
 <dd>The previous Offer activity that this undo tries to cancel: contains at least the [[URI]] identifying
 the previous activity. Optionaly, an in-band or out-of-band description of the previous activity may
 be provided (See [The Object of an activity](#ActivityObject)))</dd>
</dl>

The LDN/AS2 payload SHOULD have the following properties:

<dl>
<dt>as:context</dt>
<dd>The original Service Result in a notification thread, ie. the **object** of the previous activity that 
this undo is trying to cancel. This MUST contain at least a [[URL]] identifying the Service Result and MAY provide an in-band or 
out-of-band description (See [The Object of an activity](#ActivityObject)).</dd>
</dl>

The LDN/AS2 payload MAY have the following properties:

<dl>
<dt>as:origin</dt>
<dd>The software component that was responsible for sending the activity over the network. When used
it contains at least a [[URI]] identifying the component. Optionally, an in-band or out-of-band
description of the Agent may be provided.</dd>

<dt>as:target</dt>
<dd>The intended Agent for receiving the notification: contains at least the [[URI]] identifying the Agent.
 Optionally, an in-band or out-of-band description of the Agent may be provided 
(See [Addressing the receiver and sender](#ActivityAddressing)).</dd>
</dl>

The LDN/AS2 payload SHOULD NOT use the following properties:

<dl>
<dt>as:inReplyTo</dt>
<dd>Not in use by a sending Data Node.</dd>
</dl>

<div class=example>
Data Archive XYZ (Service Node A) sends a cancelation to 
Data Archive XYZ Australia (Service Node B) of the Offer that was sent in Example 17.

<pre class=include-code>
path: examples/example_rr_sn_sn_cancel.jsonld
highlight: json
show: 
</pre>
</div>

### Service Node acknowledges ### {#RequestResponsePatternSNSNAcknowledge}

<pre class='include'>
path: images/request_response2_service_node_acknowledge.svg
</pre>

*Figure 12: Service Node B optionally acknowledges a previously sent Offer that was
sent by a Service Node A.*

Service Node B MAY evaluate the Offer that was sent by Service Node A and can decide if 
it can commit to providing services on the Service Result. In the form of an *Accept* or 
*Reject* this information is be replied to Service Node A.

*Payload*

<table>
<thead>
 <tr>
 <th>Requirements</th>
 <td></td>
 </tr>
</thead>
<tbody>
 <tr>
 <th>Required</th>
 <td>**id** (*Activity Identifier*)</td>
</tbody>
 <tr>
 <td></td>
 <td>*RDF Properties*</td>
 </tr>
<tbody>
 <tr>
  <th>Required</id>
  <td>**rdf:type** , **as:actor** , **as:object**</td>
 </tr>
 <tr>
  <th>Should</id>
  <td>**as:context**, **as:inReplyTo**</td>
 </tr>
 <tr>
  <th>Recommended</id>
  <td>**as:origin**, **as:target**</td>
 </tr>
</tbody>
</table>

The LDN/AS2 payload MUST have the following properties:

<dl>
 <dt>id</dt>
 <dd>The activity identifier: this contain the actitivity identifier, and is a valid [[URI]] 
 (See also [Identifying an activity](#Identifying#))</dd>

 <dt>rdf:type</dt>
 <dd>The activity type: one of the type [[activitystreams-vocabulary#Accept|as:Accept]] or 
 [[activitystreams-vocabulary#Reject|as:Reject]]. The field MAY also have an additional generic 
 subtype of [[activitystreams-vocabulary#Activity|as:Activity]].</dd>

 <dt>as:actor</dt>
 <dd>The Agent that performed the activity: contains at least the [[URI]] identifying the Agent.
 Optionally, an in-band or out-of-band description of the Agent may be provided 
 (See [Addressing the receiver and sender](#ActivityAddressing)).</dd>

 <dt>as:object</dt>
 <dd>The previous Offer activity that this acknowledgment is replying to: contains at least the [[URI]] identifying
 the previous activity. Optionaly, an in-band or out-of-band description of the previous activity may
 be provided (See [The Object of an activity](#ActivityObject))).</dd>
</dl>

The LDN/AS2 payload SHOULD have the following properties:

<dl>
<dt>as:context</dt>
<dd>The original Service Result in a notification thread, ie. the **object** of the previous activity that 
this acknowledgement is replying to. This MUST contain at least a [[URI]] identifying the Service Result
and MAY provide an in-band or out-of-band description (See [The Object of an activity](#ActivityObject)).</dd>

<dt>as:inReplyTo</dt>
<dd>Points to the activity identifier of the request notification to which this activity is a response. 
In an offer acknowledgment notification, this MUST be equivalent to the value of the **object** property. 
It MUST be a [[URI]] and MAY NOT have further in-band description.</dd>
</dl>

The LDN/AS2 payload MAY have the following properties:

<dl>
<dt>as:origin</dt>
<dd>The software component that was responsible for sending the activity over the network. When used
it contains at least a [[URI]] identifying the component. Optionally, an in-band or out-of-band
description of the Agent may be provided.</dd>

<dt>as:target</dt>
<dd>The intended Agent for receiving the notification: contains at least the [[URI]] identifying the Agent.
 Optionally, an in-band or out-of-band description of the Agent may be provided 
(See [Addressing the receiver and sender](#ActivityAddressing)).</dd>
</dl>

<div class=example>
Data Archive XYZ Australia (Service Node B) sends an Accept to 
Data Archive XYZ (Service Node A) of the Offer that was sent in Example 17.

<pre class=include-code>
path: examples/example_rr_sn_sn_acknowledge.jsonld
highlight: json
show: 
</pre>
</div>

### Service Node responds ### {#RequestResponsePatternSNSNAnnounce}

<pre class='include'>
path: images/request_response2_service_node_responds.svg
</pre>

*Figure 13: Service Node B has a Service Result available pertaining to the Service Result 
on Service Node A. The Service Node B sends an Announce notification to Service Node A about
this fact.*

Service Node B SHOULD as result of an internal process on the Service Result of Service Node A
announce its own new Service Result, or reject the offer of Service Node A without a new 
Service Result being created (See [Service Node Rejects](#RequestResponsePatternSNSNReject)). 

*Payload*

<table>
<thead>
 <tr>
 <th>Requirements</th>
 <td></td>
 </tr>
</thead>
<tbody>
 <tr>
 <th>Required</th>
 <td>**id** (*Activity Identifier*)</td>
</tbody>
 <tr>
 <td></td>
 <td>*RDF Properties*</td>
 </tr>
<tbody>
 <tr>
  <th>Required</id>
  <td>**rdf:type** , **as:actor** , **as:object**</td>
 </tr>
 <tr>
  <th>Should</id>
  <td>**as:context**, **as:inReplyTo**</td>
 </tr>
 <tr>
  <th>Recommended</id>
  <td>**as:origin**, **as:target**</td>
 </tr>
</tbody>
</table>

The LDN/AS2 payload MUST have the following properties:

<dl>
 <dt>id</dt>
 <dd>The activity identifier: this contain the actitivity identifier, and is a valid [[URI]] 
 (See also [Identifying an activity](#Identifying#))</dd>

 <dt>rdf:type</dt>
 <dd>The activity type: one of type [[activitystreams-vocabulary#Announce|as:Announce]]. The
 field MAY also have an additional generic subtype of [[activitystreams-vocabulary#Activity|as:Activity]].</dd>

 <dt>as:actor</dt>
 <dd>The Agent that performed the activity: contains at least the [[URI]] identifying the Agent.
 Optionally, an in-band or out-of-band description of the Agent may be provided 
 (See [Addressing the receiver and sender](#ActivityAddressing)).</dd>

 <dt>as:object</dt>
 <dd>The Service Result of the value-added service provided for a Service Result from Service Node A: contains 
 at least an in-band or out-of-band description of the Service Result is provided 
 (See [The Object of an activity](#ActivityObject))).</dd>
</dl>

The LDN/AS2 payload SHOULD have the following properties:

<dl>
<dt>as:context</dt>
<dd>The original Service Result from Service Node A in a notification thread, ie. the **object** of 
the previous activity that this acknowledgement is replying to. This MUST contain at least a 
[[URI]] identifying the Service Result from Service Node A and MAY provide an in-band or 
out-of-band description (See [The Object of an activity](#ActivityObject)).</dd>

<dt>as:inReplyTo</dt>
<dd>Points to the activity identifier of the request notification to which this activity is a response. 
In an offer acknowledgment notification, this MUST be equivalent to the value of the **object** property. 
It MUST be a [[URI]] and MAY NOT have further in-band description.</dd>
</dl>

The LDN/AS2 payload MAY have the following properties:

<dl>
<dt>as:origin</dt>
<dd>The software component that was responsible for sending the activity over the network. When used
it contains at least a [[URI]] identifying the component. Optionally, an in-band or out-of-band
description of the Agent may be provided.</dd>

<dt>as:target</dt>
<dd>The intended Agent for receiving the notification: contains at least the [[URI]] identifying the Agent.
 Optionally, an in-band or out-of-band description of the Agent may be provided 
(See [Addressing the receiver and sender](#ActivityAddressing)).</dd>
</dl>

<div class=example>
Data Archive XYZ Australia (Service Node B) notifies Data Archive XYZ  
(Service Node A) in a request-response pattern that it announces a new Service Result 
pertaining to Service Node A Service Result urn:uuid:6E5FAF88-A7F1-47A4-B087-77345EBFF495.

<pre class=include-code>
path: examples/example_rr_sn_sn_response.jsonld
highlight: json
show: 
</pre>
</div>

### Service Node rejects ### {#RequestResponsePatternSNSNReject}

<pre class='include'>
path: images/request_response2_service_node_acknowledge.svg
</pre>

*Figure 14: Service Node B is not able to create a Service Result for a Service Result from
Service Node A. Service Node B optionally sends a Reject notification back to the Service Node A.*

In case Service Node B is not able to fulfill the value-added service on a Service Result from
Service Node A, it MAY notifiy the Data Node about this fact by sending a Reject notification.

*Payload*

<table>
<thead>
 <tr>
 <th>Requirements</th>
 <td></td>
 </tr>
</thead>
<tbody>
 <tr>
 <th>Required</th>
 <td>**id** (*Activity Identifier*)</td>
</tbody>
 <tr>
 <td></td>
 <td>*RDF Properties*</td>
 </tr>
<tbody>
 <tr>
  <th>Required</id>
  <td>**rdf:type** , **as:actor** , **as:object**</td>
 </tr>
 <tr>
  <th>Should</id>
  <td>**as:context**</td>
 </tr>
 <tr>
  <th>Recommended</id>
  <td>**as:origin**, **as:target**</td>
 </tr>
 <tr>
  <th>Not used</th>
  <td>**as:inReplyTo**</td>
 </tr> 
</tbody>
</table>

The LDN/AS2 payload MUST have the following properties:

<dl>
 <dt>id</dt>
 <dd>The activity identifier: this contain the actitivity identifier, and is a valid [[URI]] 
 (See also [Identifying an activity](#Identifying#))</dd>

 <dt>rdf:type</dt>
 <dd>The activity type: the type [[activitystreams-vocabulary#Reject|as:Reject]]. The field MAY also have an additional 
 generic subtype of [[activitystreams-vocabulary#Activity|as:Activity]].</dd>

 <dt>as:actor</dt>
 <dd>The Agent that performed the activity: contains at least the [[URI]] identifying the Agent.
 Optionally, an in-band or out-of-band description of the Agent may be provided 
 (See [Addressing the receiver and sender](#ActivityAddressing)).</dd>

 <dt>as:object</dt>
 <dd>The previous Offer activity that this acknowledgment is replying to: contains at least the [[URI]] identifying
 the previous activity. Optionaly, an in-band or out-of-band description of the previous activity may
 be provided (See [The Object of an activity](#ActivityObject))).</dd>
</dl>

The LDN/AS2 payload SHOULD have the following properties:

<dl>
<dt>as:context</dt>
<dd>The original Service Result of Service Node A in a notification thread, ie. the **object** of the
previous activity that this acknowledgement is replying to. This MUST contain at least a [[URI]] 
identifying the Service Result of Service Node A and MAY provide an in-band or out-of-band description 
(See [The Object of an activity](#ActivityObject)).</dd>

<dt>as:inReplyTo</dt>
<dd>Points to the activity identifier of the request notification to which this activity is a response. 
In an offer acknowledgment notification, this MUST be equivalent to the value of the **object** property. 
It MUST be a [[URI]] and MAY NOT have further in-band description.</dd>
</dl>

The LDN/AS2 payload MAY have the following properties:

<dl>
<dt>as:origin</dt>
<dd>The software component that was responsible for sending the activity over the network. When used
it contains at least a [[URI]] identifying the component. Optionally, an in-band or out-of-band
description of the Agent may be provided.</dd>

<dt>as:target</dt>
<dd>The intended Agent for receiving the notification: contains at least the [[URI]] identifying the Agent.
 Optionally, an in-band or out-of-band description of the Agent may be provided 
(See [Addressing the receiver and sender](#ActivityAddressing)).</dd>
</dl>

<div class=example>
Data Archive XYZ Australia (Service Node B) notifies the Data Archive XYZ (Service Node A) 
in a request-response pattern that it rejects the offer sent in a previous activity notification.

<pre class=include-code>
path: examples/example_rr_sn_sn_response_reject.jsonld
highlight: json
show: 
</pre>
</div>

Acknowledgements 
=====================

Our work is funded by the Andrew W. Mellon Foundation (grant number: 1903-06675).

<pre class=biblio>
{
	"solid-oidc": {
		"authors": [
			"Aaron Coburn (Inrupt)",
			"elf Pavlik",
			"Dmitri Zagidulin"
		],
		"href": "https://solid.github.io/authentication-panel/solid-oidc/",
		"title": "SOLID-OIDC",
		"status": "Editor’s Draft",
		"publisher": "Solid project",
		"deliveredBy": [
			"https://www.w3.org/community/solid/"
		]
	},
  "webid": {
		"authors": [
			"Andrei Sambra",
			"Henry Story",
			"Tim Berners-Lee"
		],
		"href": "https://dvcs.w3.org/hg/WebID/raw-file/tip/spec/identity-respec.html",
		"title": "WebID 1.0",
		"status": "Editor’s Draft",
		"publisher": "WebID Community Group",
		"deliveredBy": [
			"https://www.w3.org/community/webid/"
		]
	},
	"solid-protocol": {
		"authors": [
			"Sarven Capadisli",
			"Tim Berners-Lee",
			"Ruben Verborgh",
			"Kjetil Kjernsmo",
			"Justin Bingham",
			"Dmitri Zagidulin"
		],
		"href": "https://solidproject.org/TR/protocol/",
		"title": "The Solid Protocol",
		"status": "Editor’s Draft",
		"publisher": "Solid project",
		"deliveredBy": [
			"https://www.w3.org/community/solid/"
		]
	},
  "AS2": {
		"authors": [
      "James M Snell",
      "Evan Prodromou"
    ],
		"href": "https://www.w3.org/TR/activitystreams-core/",
		"title": "Activity Streams 2.0",
		"status": "W3C Recommendation 23 May 2017",
		"publisher": "W3C"
	},
  "cron": {
		"authors": ["The Open Group"
    ],
		"href": "https://pubs.opengroup.org/onlinepubs/9699919799/",
		"title": "crontab - schedule periodic background work",
		"status": "Standard",
		"publisher": "IEEE"
	}
}
</pre>
